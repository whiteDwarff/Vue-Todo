Vuex 란?
 - 복잡한 애플리케이션의 컴포넌트들을 효율적으로 관리
 - React의 Flux pattern에서 기인함
 - Vuex 라이브러리의 주요 속성 (state, getter, mutations, actions)
    # state : 컴포넌트 간에 공유하는 데이터, data() **
    # getter : 연산된 state 값을 접근하는 속성, completed
    # mutations: state 값을 변경하는 이벤트 로직, methods
    # actions: 비동기 처리 로직을 선언하는 메서드 aysnc methods**
 - Helper 기능
 - 프로젝트를 구조화하는 방법, 모듈 구조화
 
 ---------------------------------------------------------------
 ** MVC의 복잡한 데이터 흐름 문제를 해결하는 개발 패턴, Undirectional data flow
 ** 한 방향으로 흘러가는 데이터 

 action : 화면에서 발생하는 이벤트 또는 사용자의 입력
 dispatcher : 데이터를 변경하는 방법, 메서드 (model을 바꾸는 방법)
 model : 화면에 표시한 데이터 
 view : 사용자에게 비춰지는 화면, template
 ---------------------------------------------------------------
** Vuex 설치
terminal ->
npm i vuex@3.6.2 ->
'''
2 packages are looking for funding
  run `npm fund` for details
''' 오류 발생할 경우 -> 
npm install --no-fund
----------------------------------------------------------------
scr 폴더에 store 폴더 추가 후 store.js 생성 ->
 import Vue from 'vue'
import Vuex from 'vuex'

Vue.use(Vuex);

export const store = new Vuex.Store({ });
입력 후 저장
----------------------------------------------------------------
main.js 에서
import Vue from 'vue'
import App from './App.vue'
import {store} from './store/store'

Vue.config.productionTip = false

new Vue({
  el: '#app',
  store,
  render: h => h(App)
})
입력 후 저장
